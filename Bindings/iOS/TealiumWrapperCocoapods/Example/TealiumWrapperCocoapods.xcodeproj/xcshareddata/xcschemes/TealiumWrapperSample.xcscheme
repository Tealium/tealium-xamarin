<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1320"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "#  This is a modified script and it will ask the target to build separate libraries for simulator and device etc &#10;# On project folder it will be found under Generated-Frameworks folder&#10;# As per the documentations for XCode 10 Apple does not allow building FAT librares&#10;# Go ahead and check https://forums.developer.apple.com/thread/66978 and https://forums.developer.apple.com/thread/109583&#10;# Enjoy NicoX :)&#10;&#10;# exit 0 # early exit&#10;&#10;set -e&#10;# If we&apos;re already inside this script then die&#10;if [ -n &quot;$MULTIPLATFORM_BUILD_IN_PROGRESS&quot; ]; then&#10;  exit 0&#10;fi&#10;  export MULTIPLATFORM_BUILD_IN_PROGRESS=1&#10;&#10;############################################&#10;# Options&#10;############################################&#10;REVEAL_ARCHIVE_IN_FINDER=true&#10;OUTPUT_DIR_NAME=&quot;Generated-Frameworks&quot;&#10;FRAMEWORK_WRAPPER_NAME=&quot;TealiumWrapperCocoapods&quot;&#10;FRAMEWORK_TEALIUM_NAME=&quot;TealiumSwift&quot;&#10;FRAMEWORK_FIREBASE_NAME=&quot;TealiumFirebaseWrapper&quot;&#10;&#10;OUTPUT_DIR=&quot;${PROJECT_DIR}/${OUTPUT_DIR_NAME}&quot;&#10;SIMULATOR_LIBRARY_OUT_DIR=&quot;${OUTPUT_DIR}/Simulator/&quot;&#10;GENERATED_LIBRARY_DIR=&quot;${BUILD_DIR}/${CONFIGURATION}-iphoneuniversal&quot;&#10;SIMULATOR_FRAMEWORK_OUT_DIR=&quot;${GENERATED_LIBRARY_DIR}/Simulator&quot;&#10;FRAMEWORK_WRAPPER=&quot;${SIMULATOR_FRAMEWORK_OUT_DIR}/${FRAMEWORK_WRAPPER_NAME}.framework&quot;&#10;FRAMEWORK_TEALIUM=&quot;${SIMULATOR_FRAMEWORK_OUT_DIR}/${FRAMEWORK_TEALIUM_NAME}.framework&quot;&#10;FRAMEWORK_FIREBASE=&quot;${SIMULATOR_FRAMEWORK_OUT_DIR}/${FRAMEWORK_FIREBASE_NAME}.framework&quot;&#10;&#10;########################################################################&#10;# Build Frameworks&#10;########################################################################&#10;WORKSPACE_PATH=&quot;${PROJECT_DIR}/TealiumWrapperCocoapods.xcworkspace&quot;&#10;xcodebuild -workspace ${WORKSPACE_PATH} -scheme ${SCHEME_NAME} -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} clean build CONFIGURATION_BUILD_DIR=${BUILD_DIR}/${CONFIGURATION}-iphonesimulator OBJROOT=&quot;${OBJROOT}/DependantBuilds&quot; &#10;&#10;########################################################################&#10;# Create directory for general&#10;########################################################################&#10;rm -rf &quot;${GENERATED_LIBRARY_DIR}&quot;&#10;mkdir &quot;${GENERATED_LIBRARY_DIR}&quot;&#10;mkdir &quot;${SIMULATOR_FRAMEWORK_OUT_DIR}&quot;&#10;mkdir &quot;${FRAMEWORK_WRAPPER}&quot;&#10;mkdir &quot;${FRAMEWORK_TEALIUM}&quot;&#10;mkdir &quot;${FRAMEWORK_FIREBASE}&quot;&#10;&#10;########################################################################&#10;# Copy files Framework&#10;########################################################################&#10;SIMULATOR_WRAPPER_LIBRARY_PATH=&quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${FRAMEWORK_WRAPPER_NAME}.framework&quot;&#10;SIMULATOR_TEALIUM_LIBRARY_PATH=&quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${FRAMEWORK_TEALIUM_NAME}.framework&quot;&#10;SIMULATOR_FIREBASE_LIBRARY_PATH=&quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${FRAMEWORK_FIREBASE_NAME}.framework&quot;&#10;&#10;########################################################################&#10;# Make a binary for simulaotr ie. x86_64 ot i386 file system&#10;########################################################################&#10;# For Swift framework, Swiftmodule needs to be copied in the universal framework &#10;&#10;# WRAPPER&#10;&#10;if [ -d &quot;${SIMULATOR_WRAPPER_LIBRARY_PATH}/Modules/${FRAMEWORK_WRAPPER_NAME}.swiftmodule/&quot; ]; then&#10;  cp -f &quot;${SIMULATOR_WRAPPER_LIBRARY_PATH}/Modules/${FRAMEWORK_WRAPPER_NAME}.swiftmodule/&quot;* &quot;${FRAMEWORK_WRAPPER}/Modules/${FRAMEWORK_WRAPPER_NAME}.swiftmodule/&quot; | echo&#10;fi&#10;cp -r &quot;${SIMULATOR_WRAPPER_LIBRARY_PATH}/.&quot; &quot;${FRAMEWORK_WRAPPER}&quot;&#10;&#10;########################################################################&#10;# Copy simulator build library in output folder&#10;########################################################################&#10;rm -rf &quot;$OUTPUT_DIR&quot;&#10;mkdir -p &quot;$OUTPUT_DIR&quot;&#10;mkdir -p ${SIMULATOR_LIBRARY_OUT_DIR}&#10;&#10;cp -r &quot;${FRAMEWORK_WRAPPER}&quot; &quot;$SIMULATOR_LIBRARY_OUT_DIR&quot;&#10;&#10;# TEALIUM SWIFT&#10;&#10;if [ -d &quot;${SIMULATOR_TEALIUM_LIBRARY_PATH}/Modules/${FRAMEWORK_TEALIUM_NAME}.swiftmodule/&quot; ]; then&#10;  cp -f &quot;${SIMULATOR_TEALIUM_LIBRARY_PATH}/Modules/${FRAMEWORK_TEALIUM_NAME}.swiftmodule/&quot;* &quot;${FRAMEWORK_TEALIUM}/Modules/${FRAMEWORK_TEALIUM_NAME}.swiftmodule/&quot; | echo&#10;fi&#10;cp -r &quot;${SIMULATOR_TEALIUM_LIBRARY_PATH}/.&quot; &quot;${FRAMEWORK_TEALIUM}&quot;&#10;&#10;########################################################################&#10;# Copy simulator build library in output folder&#10;########################################################################&#10;&#10;cp -r &quot;${FRAMEWORK_TEALIUM}&quot; &quot;$SIMULATOR_LIBRARY_OUT_DIR&quot;&#10;&#10;# TEALIUM FIREBASE&#10;&#10;if [ -d &quot;${SIMULATOR_FIREBASE_LIBRARY_PATH}/Modules/${FRAMEWORK_FIREBASE_NAME}.swiftmodule/&quot; ]; then&#10;  cp -f &quot;${SIMULATOR_FIREBASE_LIBRARY_PATH}/Modules/${FRAMEWORK_FIREBASE_NAME}.swiftmodule/&quot;* &quot;${FRAMEWORK_FIREBASE}/Modules/${FRAMEWORK_FIREBASE_NAME}.swiftmodule/&quot; | echo&#10;fi&#10;cp -r &quot;${SIMULATOR_FIREBASE_LIBRARY_PATH}/.&quot; &quot;${FRAMEWORK_FIREBASE}&quot;&#10;&#10;########################################################################&#10;# Copy simulator build library in output folder&#10;########################################################################&#10;&#10;cp -r &quot;${FRAMEWORK_FIREBASE}&quot; &quot;$SIMULATOR_LIBRARY_OUT_DIR&quot;&#10;&#10;#########################################################################&#10;&#10;echo &quot;Simulator Lib Path ----&gt;&quot; &quot;${SIMULATOR_LIBRARY_OUT_DIR}&quot; &quot;&lt;----&quot;&#10;&#10;##########################################################################&#10;# Now lets build for device; shall we?&#10;##########################################################################&#10;DEVICE_LIBRARY_OUT_DIR=&quot;${OUTPUT_DIR}/Device/&quot;&#10;DEVICE_FRAMEWORK_OUT_DIR=&quot;${GENERATED_LIBRARY_DIR}/Device&quot;&#10;FRAMEWORK_WRAPPER=&quot;${DEVICE_FRAMEWORK_OUT_DIR}/${FRAMEWORK_WRAPPER_NAME}.framework&quot;&#10;FRAMEWORK_TEALIUM=&quot;${DEVICE_FRAMEWORK_OUT_DIR}/${FRAMEWORK_TEALIUM_NAME}.framework&quot;&#10;FRAMEWORK_FIREBASE=&quot;${DEVICE_FRAMEWORK_OUT_DIR}/${FRAMEWORK_FIREBASE_NAME}.framework&quot;&#10;&#10;########################################################################&#10;# Build Device Frameworks&#10;########################################################################&#10;echo &quot;xcodebuild -workspace ${WORKSPACE_PATH} -scheme ${SCHEME_NAME} -sdk iphoneos ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} clean build CONFIGURATION_BUILD_DIR=${BUILD_DIR}/${CONFIGURATION}-iphoneos OBJROOT=${OBJROOT}/DependantBuilds&quot;&#10;&#10;xcodebuild -workspace ${WORKSPACE_PATH} -scheme ${SCHEME_NAME} -sdk iphoneos ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} clean build CONFIGURATION_BUILD_DIR=${BUILD_DIR}/${CONFIGURATION}-iphoneos OBJROOT=&quot;${OBJROOT}/DependantBuilds&quot; &#10;&#10;########################################################################&#10;# Create directory for general&#10;########################################################################&#10;rm -rf &quot;${GENERATED_LIBRARY_DIR}&quot;&#10;mkdir &quot;${GENERATED_LIBRARY_DIR}&quot;&#10;mkdir &quot;${DEVICE_FRAMEWORK_OUT_DIR}&quot;&#10;mkdir &quot;${FRAMEWORK_WRAPPER}&quot;&#10;mkdir &quot;${FRAMEWORK_TEALIUM}&quot;&#10;mkdir &quot;${FRAMEWORK_FIREBASE}&quot;&#10;&#10;########################################################################&#10;# Copy files Framework&#10;########################################################################&#10;DEVICE_WRAPPER_LIBRARY_PATH=&quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/${FRAMEWORK_WRAPPER_NAME}.framework&quot;&#10;DEVICE_TEALIUM_LIBRARY_PATH=&quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/${FRAMEWORK_TEALIUM_NAME}.framework&quot;&#10;DEVICE_FIREBASE_LIBRARY_PATH=&quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/${FRAMEWORK_FIREBASE_NAME}.framework&quot;&#10;&#10;########################################################################&#10;# Make a binary for device ie. arm7, arm7v, arm8 file system&#10;########################################################################&#10;# For Swift framework, Swiftmodule needs to be copied in the universal framework &#10;&#10;# WRAPPER &#10;&#10;if [ -d &quot;${DEVICE_WRAPPER_LIBRARY_PATH}/Modules/${FRAMEWORK_WRAPPER_NAME}.swiftmodule/&quot; ]; then&#10;  cp -f &quot;${DEVICE_WRAPPER_LIBRARY_PATH}/Modules/${FRAMEWORK_WRAPPER_NAME}.swiftmodule/&quot;* &quot;${FRAMEWORK_WRAPPER}/Modules/${FRAMEWORK_WRAPPER_NAME}.swiftmodule/&quot; | echo&#10;fi&#10;cp -r &quot;${DEVICE_WRAPPER_LIBRARY_PATH}/.&quot; &quot;${FRAMEWORK_WRAPPER}&quot;&#10;########################################################################&#10;# Copy device build library in output folder&#10;########################################################################&#10;mkdir -p ${DEVICE_LIBRARY_OUT_DIR}&#10;cp -r &quot;${FRAMEWORK_WRAPPER}&quot; &quot;$DEVICE_LIBRARY_OUT_DIR&quot;&#10;&#10;# Tealium Swift&#10;&#10;if [ -d &quot;${DEVICE_TEALIUM_LIBRARY_PATH}/Modules/${FRAMEWORK_TEALIUM_NAME}.swiftmodule/&quot; ]; then&#10;  cp -f &quot;${DEVICE_TEALIUM_LIBRARY_PATH}/Modules/${FRAMEWORK_TEALIUM_NAME}.swiftmodule/&quot;* &quot;${FRAMEWORK_TEALIUM}/Modules/${FRAMEWORK_TEALIUM_NAME}.swiftmodule/&quot; | echo&#10;fi&#10;cp -r &quot;${DEVICE_TEALIUM_LIBRARY_PATH}/.&quot; &quot;${FRAMEWORK_TEALIUM}&quot;&#10;########################################################################&#10;# Copy device build library in output folder&#10;########################################################################&#10;cp -r &quot;${FRAMEWORK_TEALIUM}&quot; &quot;$DEVICE_LIBRARY_OUT_DIR&quot;&#10;&#10;# Tealium Firebase&#10;&#10;if [ -d &quot;${DEVICE_FIREBASE_LIBRARY_PATH}/Modules/${FRAMEWORK_FIREBASE_NAME}.swiftmodule/&quot; ]; then&#10;  cp -f &quot;${DEVICE_FIREBASE_LIBRARY_PATH}/Modules/${FRAMEWORK_FIREBASE_NAME}.swiftmodule/&quot;* &quot;${FRAMEWORK_FIREBASE}/Modules/${FRAMEWORK_FIREBASE_NAME}.swiftmodule/&quot; | echo&#10;fi&#10;cp -r &quot;${DEVICE_FIREBASE_LIBRARY_PATH}/.&quot; &quot;${FRAMEWORK_FIREBASE}&quot;&#10;########################################################################&#10;# Copy device build library in output folder&#10;########################################################################&#10;cp -r &quot;${FRAMEWORK_FIREBASE}&quot; &quot;$DEVICE_LIBRARY_OUT_DIR&quot;&#10;&#10;echo &quot;Device Lib Path ----&gt;&quot; &quot;${DEVICE_LIBRARY_OUT_DIR}&quot; &quot;&lt;----&quot;&#10;&#10;&#10;cd $OUTPUT_DIR&#10;&#10;cp -R &quot;Device&quot; &quot;Fat&quot;&#10;&#10;WRAPPER=&quot;$FRAMEWORK_WRAPPER_NAME&quot;&#10;cp -R &quot;Simulator/${WRAPPER}.framework/Modules/${WRAPPER}.swiftmodule/&quot; &quot;Fat/${WRAPPER}.framework/Modules/${WRAPPER}.swiftmodule/&quot;&#10;&#10;&#10;lipo -create -output &quot;Fat/${WRAPPER}.framework/${WRAPPER}&quot; &quot;Device/${WRAPPER}.framework/${WRAPPER}&quot; &quot;Simulator/${WRAPPER}.framework/${WRAPPER}&quot;&#10;&#10;TEALIUM=&quot;$FRAMEWORK_TEALIUM_NAME&quot;&#10;cp -R &quot;Simulator/${TEALIUM}.framework/Modules/${TEALIUM}.swiftmodule/&quot; &quot;Fat/${TEALIUM}.framework/Modules/${TEALIUM}.swiftmodule/&quot;&#10;&#10;&#10;lipo -create -output &quot;Fat/${TEALIUM}.framework/${TEALIUM}&quot; &quot;Device/${TEALIUM}.framework/${TEALIUM}&quot; &quot;Simulator/${TEALIUM}.framework/${TEALIUM}&quot;&#10;&#10;FIREBASE=&quot;$FRAMEWORK_FIREBASE_NAME&quot;&#10;cp -R &quot;Simulator/${FIREBASE}.framework/Modules/${FIREBASE}.swiftmodule/&quot; &quot;Fat/${FIREBASE}.framework/Modules/${FIREBASE}.swiftmodule/&quot;&#10;&#10;&#10;lipo -create -output &quot;Fat/${FIREBASE}.framework/${FIREBASE}&quot; &quot;Device/${FIREBASE}.framework/${FIREBASE}&quot; &quot;Simulator/${FIREBASE}.framework/${FIREBASE}&quot;&#10;&#10;&#10;if [ ${REVEAL_ARCHIVE_IN_FINDER} = true ]; then&#10;  open &quot;${OUTPUT_DIR}/&quot;&#10;fi&#10;&#10;&#10;cd ../../../../../APIs/Tealium.Platform.iOS&#10;&#10;rm -rf Release-fat&#10;&#10;cp -R ../../Bindings/iOS/TealiumWrapperCocoapods/Example/Generated-Frameworks/Fat Release-fat&#10;&#10;rm -rf &quot;Release-Fat/${FRAMEWORK_FIREBASE_NAME}.framework&quot;&#10;&#10;&#10;cd ../../RemoteCommands/TealiumFirebase.Platform.iOS&#10;&#10;rm -rf Release-fat&#10;&#10;cp -R ../../Bindings/iOS/TealiumWrapperCocoapods/Example/Generated-Frameworks/Fat Release-fat&#10;&#10;rm -rf &quot;Release-Fat/${FRAMEWORK_WRAPPER_NAME}.framework&quot;&#10;rm -rf &quot;Release-Fat/${FRAMEWORK_TEALIUM_NAME}.framework&quot;&#10;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "15DEE2572784604E0011B7B7"
                     BuildableName = "TealiumWrapperSample.app"
                     BlueprintName = "TealiumWrapperSample"
                     ReferencedContainer = "container:TealiumWrapperCocoapods.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "15DEE2572784604E0011B7B7"
               BuildableName = "TealiumWrapperSample.app"
               BlueprintName = "TealiumWrapperSample"
               ReferencedContainer = "container:TealiumWrapperCocoapods.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Release"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "15DEE2572784604E0011B7B7"
            BuildableName = "TealiumWrapperSample.app"
            BlueprintName = "TealiumWrapperSample"
            ReferencedContainer = "container:TealiumWrapperCocoapods.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "15DEE2572784604E0011B7B7"
            BuildableName = "TealiumWrapperSample.app"
            BlueprintName = "TealiumWrapperSample"
            ReferencedContainer = "container:TealiumWrapperCocoapods.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
